# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2
jobs:
  build:
    docker:
      # Specify the version you desire here
      - image: alpine:latest

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # Using the RAM variation mitigates I/O contention
      # for database intensive operations.
      # - image: circleci/mysql:5.7-ram
      #
      # - image: redis:2.8.19
      - image: circleci/mysql:5.7.30-ram
        environment:
          MYSQL_ROOT_PASSWORD: secret
          MYSQL_DATABASE: test_my_app
          MYSQL_USER: my_app
          MYSQL_PASSWORD: secret
          
    steps:
      - checkout

      #- run: sudo apt update # PHP CircleCI 2.0 Configuration File# PHP CircleCI 2.0 Configuration File sudo apt install zlib1g-dev libsqlite3-dev
      #- run: sudo docker-php-ext-install zip
      - run: apk update
      - run: "apk add 
                php7 
                php7-apache2
                php7-bcmath
                php7-bz2
                php7-calendar
                php7-cgi
                php7-common
                php7-ctype
                php7-curl
                php7-dba
                php7-dbg
                php7-dev
                php7-doc
                php7-dom
                php7-embed
                php7-enchant
                php7-exif
                php7-fileinfo
                php7-ftp
                php7-gd
                php7-gettext
                php7-gmp
                php7-iconv
                php7-imap
                php7-intl
                php7-json
                php7-ldap
                php7-mbstring
                php7-mysqli
                php7-mysqlnd
                php7-odbc
                php7-opcache
                php7-openssl
                php7-pcntl
                php7-pdo
                php7-pdo_dblib
                php7-pdo_mysql
                php7-pdo_odbc
                php7-pdo_pgsql
                php7-pdo_sqlite
                php7-pear
                php7-pecl-xdebug
                php7-pgsql
                php7-phar
                php7-phpdbg
                php7-posix
                php7-pspell
                php7-session
                php7-shmop
                php7-simplexml
                php7-snmp
                php7-soap
                php7-sockets
                php7-sodium
                php7-sqlite3
                php7-sysvmsg
                php7-sysvsem
                php7-sysvshm
                php7-tidy
                php7-tokenizer
                php7-xml
                php7-xmlreader
                php7-xmlrpc
                php7-xmlwriter
                php7-xsl
                php7-zip
                composer"

      # Download and cache dependencies
      - restore_cache:
          keys:
            # "composer.lock" can be used if it is committed to the repo
            - v1-dependencies-{{ checksum "composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: composer install -n --prefer-dist
      - run: "cp config/app.default.php config/app_local.php"
      - run: "sed -i -e 's/localhost/127.0.0.1/g' config/app_local.php"
      - run: "sed -i -e 's/E_ALL/E_ALL \\& ~E_USER_DEPRECATED \\& ~E_DEPRECATED/g' config/app_local.php"
      - run: "sed -i -e 's/test_myapp/test_my_app/g' config/app_local.php"
      - run: "sed -i -e 's/__SALT__/0123456789/g' config/app_local.php"
      #- run: "php bin/cake.php migrations migrate"

      - save_cache:
          key: v1-dependencies-{{ checksum "composer.json" }}
          paths:
            - ./vendor

      # run tests with phpunit or codecept
      - run: ./vendor/bin/phpunit
      #- run: ./vendor/bin/codecept build
      #- run: ./vendor/bin/codecept run